{"version":3,"sources":["rest/gen/configuration.ts","rest/NotesApi.ts","rest/gen/api/NoteRestControllerApi.ts","rest/StatsApi.ts","rest/gen/api/StatisticsRestControllerApi.ts","store/collabnotes.ts","rest/restfunctions.ts","components/Home.tsx","components/ViewNote.tsx","components/NewNote.tsx","CollabNotes.tsx","index.tsx"],"names":["Configuration","apiKey","username","password","accessToken","NotesApi","basePath","configuration","defaultExtraJQueryAjaxSettings","defaultHeaders","undefined","this","objA","objB","key","hasOwnProperty","id","version","body","extraJQueryAjaxSettings","localVarPath","replace","encodeURIComponent","String","headerParams","Error","$","requestOptions","url","type","headers","processData","data","JSON","stringify","contentType","Object","assign","dfd","then","textStatus","jqXHR","resolve","response","xhr","errorThrown","reject","promise","StatsApi","SET_NOTES","SET_STATS","CREATE_NOTE","DELETE_NOTE","ADD_ITEM","REMOVE_ITEM","createNote","title","clbk","dispatch","Promise","createNoteRest","newNoteId","note","items","deleteNote","deleteNoteRest","ok","alert","error","addItem","item","addItemRest","removeItem","removeItemRest","INITIAL_STATE","notes","stats","avgItems","connector","connect","state","collabNotes","props","noteTitles","map","n","to","React","Component","mapDispatchToProps","history","useHistory","noteId","useParams","foundNotes","filter","length","noteItems","i","onClick","e","push","handleDeleteNoteClick","onSubmit","preventDefault","form","target","value","name","fetchAllNotes","allNotes","fetchStats","averageItems","path","component","NewNote","ViewNote","Home","rootReducer","combineReducers","action","slice","updatedNotes","updatedItems","store","createStore","composeWithDevTools","applyMiddleware","thunk","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.e58672b0.chunk.js","sourcesContent":["export class Configuration {\n    apiKey: string | undefined;\n    username: string | undefined;\n    password: string | undefined;\n    accessToken: string | (() => string) | undefined;\n}","import { NoteRestControllerApi } from './gen/api/NoteRestControllerApi';\n\nexport class NotesApi extends NoteRestControllerApi {\n    //basePath = \"\";\n}","/**\n * OpenAPI definition\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as $ from 'jquery';\nimport * as models from '../model/models';\nimport { COLLECTION_FORMATS } from '../variables';\nimport { Configuration } from '../configuration';\n\n/* tslint:disable:no-unused-variable member-ordering */\n\n\nexport class NoteRestControllerApi {\n    protected basePath = 'http://localhost:8080';\n    public defaultHeaders: Array<string> = [];\n    public defaultExtraJQueryAjaxSettings?: JQueryAjaxSettings = undefined;\n    public configuration: Configuration = new Configuration();\n\n    constructor(basePath?: string, configuration?: Configuration, defaultExtraJQueryAjaxSettings?: JQueryAjaxSettings) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (defaultExtraJQueryAjaxSettings) {\n            this.defaultExtraJQueryAjaxSettings = defaultExtraJQueryAjaxSettings;\n        }\n    }\n\n    private extendObj<T1 extends object, T2 extends T1>(objA: T2, objB: T2): T1|T2 {\n        for (let key in objB) {\n            if (objB.hasOwnProperty(key)) {\n                objA[key] = objB[key];\n            }\n        }\n        return objA;\n    }\n\n    /**\n     * \n     * @param id \n     * @param version \n     * @param body \n     */\n    public addItem(id: string, version: number, body: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<\n    { response: JQueryXHR; body: models.UpdateResponse;  },\n    { response: JQueryXHR; errorThrown: string }\n    > {\n        let localVarPath = this.basePath + '/rest/note/{id}/{version}/item'.replace('{' + 'id' + '}', encodeURIComponent(String(id))).replace('{' + 'version' + '}', encodeURIComponent(String(version)));\n\n        let queryParameters: any = {};\n        let headerParams: any = {};\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling addItem.');\n        }\n\n        // verify required parameter 'version' is not null or undefined\n        if (version === null || version === undefined) {\n            throw new Error('Required parameter version was null or undefined when calling addItem.');\n        }\n\n        // verify required parameter 'body' is not null or undefined\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling addItem.');\n        }\n\n\n        localVarPath = localVarPath + \"?\" + $.param(queryParameters);\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json'\n        ];\n\n\n        headerParams['Content-Type'] = 'application/json';\n\n        let requestOptions: JQueryAjaxSettings = {\n            url: localVarPath,\n            type: 'POST',\n            headers: headerParams,\n            processData: false\n        };\n\n        requestOptions.data = JSON.stringify(body);\n        if (headerParams['Content-Type']) {\n            requestOptions.contentType = headerParams['Content-Type'];\n        }\n\n        if (extraJQueryAjaxSettings) {\n            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);\n        }\n\n        if (this.defaultExtraJQueryAjaxSettings) {\n            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);\n        }\n\n        let dfd = $.Deferred<\n            { response: JQueryXHR; body: models.UpdateResponse;  },\n            { response: JQueryXHR; errorThrown: string }\n        >();\n        $.ajax(requestOptions).then(\n            (data: models.UpdateResponse, textStatus: string, jqXHR: JQueryXHR) =>\n                dfd.resolve({response: jqXHR, body: data}),\n            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>\n                dfd.reject({response: xhr, errorThrown: errorThrown})\n        );\n        return dfd.promise();\n    }\n\n    /**\n     * \n     */\n    public allNotes(extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<\n    { response: JQueryXHR; body: Array<models.NoteDTO>;  },\n    { response: JQueryXHR; errorThrown: string }\n    > {\n        let localVarPath = this.basePath + '/rest/note/all';\n\n        let queryParameters: any = {};\n        let headerParams: any = {};\n\n        localVarPath = localVarPath + \"?\" + $.param(queryParameters);\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        // to determine the Accept header\n        let produces: string[] = [\n            '*/*'\n        ];\n\n\n        let requestOptions: JQueryAjaxSettings = {\n            url: localVarPath,\n            type: 'GET',\n            headers: headerParams,\n            processData: false\n        };\n\n        if (headerParams['Content-Type']) {\n            requestOptions.contentType = headerParams['Content-Type'];\n        }\n\n        if (extraJQueryAjaxSettings) {\n            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);\n        }\n\n        if (this.defaultExtraJQueryAjaxSettings) {\n            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);\n        }\n\n        let dfd = $.Deferred<\n            { response: JQueryXHR; body: Array<models.NoteDTO>;  },\n            { response: JQueryXHR; errorThrown: string }\n        >();\n        $.ajax(requestOptions).then(\n            (data: Array<models.NoteDTO>, textStatus: string, jqXHR: JQueryXHR) =>\n                dfd.resolve({response: jqXHR, body: data}),\n            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>\n                dfd.reject({response: xhr, errorThrown: errorThrown})\n        );\n        return dfd.promise();\n    }\n\n    /**\n     * \n     * @param body \n     */\n    public createNote(body: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<\n    { response: JQueryXHR; body: string;  },\n    { response: JQueryXHR; errorThrown: string }\n    > {\n        let localVarPath = this.basePath + '/rest/note/';\n\n        let queryParameters: any = {};\n        let headerParams: any = {};\n        // verify required parameter 'body' is not null or undefined\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling createNote.');\n        }\n\n\n        localVarPath = localVarPath + \"?\" + $.param(queryParameters);\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        // to determine the Accept header\n        let produces: string[] = [\n            '*/*'\n        ];\n\n\n        headerParams['Content-Type'] = 'application/json';\n\n        let requestOptions: JQueryAjaxSettings = {\n            url: localVarPath,\n            type: 'POST',\n            headers: headerParams,\n            processData: false\n        };\n\n        requestOptions.data = JSON.stringify(body);\n        if (headerParams['Content-Type']) {\n            requestOptions.contentType = headerParams['Content-Type'];\n        }\n\n        if (extraJQueryAjaxSettings) {\n            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);\n        }\n\n        if (this.defaultExtraJQueryAjaxSettings) {\n            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);\n        }\n\n        let dfd = $.Deferred<\n            { response: JQueryXHR; body: string;  },\n            { response: JQueryXHR; errorThrown: string }\n        >();\n        $.ajax(requestOptions).then(\n            (data: string, textStatus: string, jqXHR: JQueryXHR) =>\n                dfd.resolve({response: jqXHR, body: data}),\n            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>\n                dfd.reject({response: xhr, errorThrown: errorThrown})\n        );\n        return dfd.promise();\n    }\n\n    /**\n     * \n     * @param id \n     * @param version \n     */\n    public deleteNote(id: string, version: number, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<\n    { response: JQueryXHR; body: models.UpdateResponse;  },\n    { response: JQueryXHR; errorThrown: string }\n    > {\n        let localVarPath = this.basePath + '/rest/note/{id}/{version}'.replace('{' + 'id' + '}', encodeURIComponent(String(id))).replace('{' + 'version' + '}', encodeURIComponent(String(version)));\n\n        let queryParameters: any = {};\n        let headerParams: any = {};\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling deleteNote.');\n        }\n\n        // verify required parameter 'version' is not null or undefined\n        if (version === null || version === undefined) {\n            throw new Error('Required parameter version was null or undefined when calling deleteNote.');\n        }\n\n\n        localVarPath = localVarPath + \"?\" + $.param(queryParameters);\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        // to determine the Accept header\n        let produces: string[] = [\n            '*/*'\n        ];\n\n\n        let requestOptions: JQueryAjaxSettings = {\n            url: localVarPath,\n            type: 'DELETE',\n            headers: headerParams,\n            processData: false\n        };\n\n        if (headerParams['Content-Type']) {\n            requestOptions.contentType = headerParams['Content-Type'];\n        }\n\n        if (extraJQueryAjaxSettings) {\n            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);\n        }\n\n        if (this.defaultExtraJQueryAjaxSettings) {\n            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);\n        }\n\n        let dfd = $.Deferred<\n            { response: JQueryXHR; body: models.UpdateResponse;  },\n            { response: JQueryXHR; errorThrown: string }\n        >();\n        $.ajax(requestOptions).then(\n            (data: models.UpdateResponse, textStatus: string, jqXHR: JQueryXHR) =>\n                dfd.resolve({response: jqXHR, body: data}),\n            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>\n                dfd.reject({response: xhr, errorThrown: errorThrown})\n        );\n        return dfd.promise();\n    }\n\n    /**\n     * \n     * @param id \n     * @param version \n     * @param body \n     */\n    public removeItem(id: string, version: number, body: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<\n    { response: JQueryXHR; body: models.UpdateResponse;  },\n    { response: JQueryXHR; errorThrown: string }\n    > {\n        let localVarPath = this.basePath + '/rest/note/{id}/{version}/item'.replace('{' + 'id' + '}', encodeURIComponent(String(id))).replace('{' + 'version' + '}', encodeURIComponent(String(version)));\n\n        let queryParameters: any = {};\n        let headerParams: any = {};\n        // verify required parameter 'id' is not null or undefined\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling removeItem.');\n        }\n\n        // verify required parameter 'version' is not null or undefined\n        if (version === null || version === undefined) {\n            throw new Error('Required parameter version was null or undefined when calling removeItem.');\n        }\n\n        // verify required parameter 'body' is not null or undefined\n        if (body === null || body === undefined) {\n            throw new Error('Required parameter body was null or undefined when calling removeItem.');\n        }\n\n\n        localVarPath = localVarPath + \"?\" + $.param(queryParameters);\n        // to determine the Content-Type header\n        let consumes: string[] = [\n            'application/json'\n        ];\n\n        // to determine the Accept header\n        let produces: string[] = [\n            'application/json'\n        ];\n\n\n        headerParams['Content-Type'] = 'application/json';\n\n        let requestOptions: JQueryAjaxSettings = {\n            url: localVarPath,\n            type: 'DELETE',\n            headers: headerParams,\n            processData: false\n        };\n\n        requestOptions.data = JSON.stringify(body);\n        if (headerParams['Content-Type']) {\n            requestOptions.contentType = headerParams['Content-Type'];\n        }\n\n        if (extraJQueryAjaxSettings) {\n            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);\n        }\n\n        if (this.defaultExtraJQueryAjaxSettings) {\n            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);\n        }\n\n        let dfd = $.Deferred<\n            { response: JQueryXHR; body: models.UpdateResponse;  },\n            { response: JQueryXHR; errorThrown: string }\n        >();\n        $.ajax(requestOptions).then(\n            (data: models.UpdateResponse, textStatus: string, jqXHR: JQueryXHR) =>\n                dfd.resolve({response: jqXHR, body: data}),\n            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>\n                dfd.reject({response: xhr, errorThrown: errorThrown})\n        );\n        return dfd.promise();\n    }\n\n}\n","import { StatisticsRestControllerApi } from './gen/api/StatisticsRestControllerApi';\n\nexport class StatsApi extends StatisticsRestControllerApi {\n    //basePath = \"\";\n}","/**\n * OpenAPI definition\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as $ from 'jquery';\nimport * as models from '../model/models';\nimport { COLLECTION_FORMATS } from '../variables';\nimport { Configuration } from '../configuration';\n\n/* tslint:disable:no-unused-variable member-ordering */\n\n\nexport class StatisticsRestControllerApi {\n    protected basePath = 'http://localhost:8080';\n    public defaultHeaders: Array<string> = [];\n    public defaultExtraJQueryAjaxSettings?: JQueryAjaxSettings = undefined;\n    public configuration: Configuration = new Configuration();\n\n    constructor(basePath?: string, configuration?: Configuration, defaultExtraJQueryAjaxSettings?: JQueryAjaxSettings) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (defaultExtraJQueryAjaxSettings) {\n            this.defaultExtraJQueryAjaxSettings = defaultExtraJQueryAjaxSettings;\n        }\n    }\n\n    private extendObj<T1 extends object, T2 extends T1>(objA: T2, objB: T2): T1|T2 {\n        for (let key in objB) {\n            if (objB.hasOwnProperty(key)) {\n                objA[key] = objB[key];\n            }\n        }\n        return objA;\n    }\n\n    /**\n     * \n     */\n    public stats(extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<\n    { response: JQueryXHR; body: models.StatisticsDTO;  },\n    { response: JQueryXHR; errorThrown: string }\n    > {\n        let localVarPath = this.basePath + '/rest/stats';\n\n        let queryParameters: any = {};\n        let headerParams: any = {};\n\n        localVarPath = localVarPath + \"?\" + $.param(queryParameters);\n        // to determine the Content-Type header\n        let consumes: string[] = [\n        ];\n\n        // to determine the Accept header\n        let produces: string[] = [\n            '*/*'\n        ];\n\n\n        let requestOptions: JQueryAjaxSettings = {\n            url: localVarPath,\n            type: 'GET',\n            headers: headerParams,\n            processData: false\n        };\n\n        if (headerParams['Content-Type']) {\n            requestOptions.contentType = headerParams['Content-Type'];\n        }\n\n        if (extraJQueryAjaxSettings) {\n            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);\n        }\n\n        if (this.defaultExtraJQueryAjaxSettings) {\n            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);\n        }\n\n        let dfd = $.Deferred<\n            { response: JQueryXHR; body: models.StatisticsDTO;  },\n            { response: JQueryXHR; errorThrown: string }\n        >();\n        $.ajax(requestOptions).then(\n            (data: models.StatisticsDTO, textStatus: string, jqXHR: JQueryXHR) =>\n                dfd.resolve({response: jqXHR, body: data}),\n            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>\n                dfd.reject({response: xhr, errorThrown: errorThrown})\n        );\n        return dfd.promise();\n    }\n\n}\n","import { Dispatch } from \"react\";\n\nimport { addItemRest, createNoteRest, deleteNoteRest, fetchAllNotesRest, fetchStatsRest, removeItemRest } from \"../rest/restfunctions\";\n\nexport interface Note {\n    id: string,\n    version: number,\n    title: string,\n    items: string[]\n}\n\nexport interface Statistics {\n    items: number,\n    notes: number,\n    avgItems: number\n}\n\nexport interface CollabNotesState {\n    notes: Note[],\n    stats: Statistics\n}\n\nexport const SET_NOTES = \"SET_NOTES\";\nexport const SET_STATS = \"SET_STATS\";\nexport const CREATE_NOTE = \"CREATE_NOTE\";\nexport const DELETE_NOTE = \"DELETE_NOTE\";\nexport const ADD_ITEM = \"ADD_ITEM\";\nexport const REMOVE_ITEM = \"REMOVE_ITEM\";\n\ninterface CreateNoteAction {\n    type: typeof CREATE_NOTE,\n    note: Note\n}\n\ninterface DeleteNoteAction {\n    type: typeof DELETE_NOTE,\n    note: Note\n}\n\ninterface AddItemAction {\n    type: typeof ADD_ITEM,\n    note: Note,\n    item: string\n}\n\ninterface RemoveItem {\n    type: typeof REMOVE_ITEM,\n    note: Note,\n    item: string\n}\n\ninterface SetNotes {\n    type: typeof SET_NOTES,\n    notes: Note[]\n}\n\ninterface SetStats {\n    type: typeof SET_STATS,\n    stats: Statistics\n}\n\nexport type EventActionTypes \n    = SetNotes\n    | SetStats\n    | CreateNoteAction \n    | DeleteNoteAction\n    | AddItemAction\n    | RemoveItem\n\nexport function fetchStats() {\n    return (dispatch: Dispatch<SetStats>) => {\n        return fetchStatsRest().then((stats) => dispatch({\n            type: SET_STATS,\n            stats: stats\n        }));\n    };\n}\n\nexport function fetchAllNotes() {\n    return (dispatch: Dispatch<SetNotes>) => {\n        return fetchAllNotesRest().then((notes) => dispatch({\n            type: SET_NOTES,\n            notes: notes\n        }));\n    };\n}\n\n\nexport function createNote(title: string, clbk: (noteId: string) => void) {\n    return (dispatch: Dispatch<CreateNoteAction>) => {\n        return createNoteRest(title).then(newNoteId => {\n            dispatch({\n                type: CREATE_NOTE,\n                note: {\n                    id: newNoteId,\n                    // NOTE: initial version is 0, this is a hack, better to send from server\n                    version: 0,\n                    title: title,\n                    items: []\n                }\n            });\n\n            clbk(newNoteId);\n        });\n    };\n}\n\nexport function deleteNote(note: Note) {\n    return (dispatch: Dispatch<DeleteNoteAction>) => {\n        return deleteNoteRest(note).then(response => {\n            if (response.ok) {\n                dispatch({\n                    type: DELETE_NOTE,\n                    note: note\n                });\n            } else {\n                // NOTE: this is not proper error handling\n                alert(response.error);\n            }\n        });\n    };\n}\n\nexport function addItem(note: Note, item: string) {\n    return (dispatch: Dispatch<AddItemAction>) => {\n        return addItemRest(note, item).then(response => {\n            if (response.ok) {\n                dispatch({\n                    type: ADD_ITEM,\n                    note: note,\n                    item: item\n                });\n            } else {\n                // NOTE: this is not proper error handling\n                alert(response.error);\n            }\n        });\n    };\n}\n\nexport function removeItem(note: Note, item: string) {\n    return (dispatch: Dispatch<RemoveItem>) => {\n        return removeItemRest(note, item).then(response => {\n            if (response.ok) {\n                dispatch({\n                    type: REMOVE_ITEM,\n                    note: note,\n                    item: item\n                });\n            } else {\n                // NOTE: this is not proper error handling\n                alert(response.error);\n            }\n        });\n    };\n}\n\nexport const INITIAL_STATE: CollabNotesState = {\n    notes: [],\n    stats: {\n        avgItems: 0.0,\n        items: 0,\n        notes: 0\n    }\n};\n\nexport function collabNotesReducer(\n  state: CollabNotesState = INITIAL_STATE,\n  action: EventActionTypes\n): CollabNotesState {\n    switch (action.type) {\n        case CREATE_NOTE:\n            return {\n                ...state,\n                notes: [...state.notes.slice(), action.note],\n                stats: { ...state.stats }\n            };\n\n        case DELETE_NOTE: {\n            const updatedNotes = state.notes.filter(note => note.id !== action.note.id);\n            return { \n                ...state, \n                notes: updatedNotes\n            };\n        }\n\n        case ADD_ITEM: {\n            const updatedNotes = state.notes.map(note => {\n                if (action.note.id === note.id) {\n                    const updatedItems = [ ...note.items, action.item];\n                    return {\n                        ... note,\n                        items: updatedItems,\n                        version: note.version + 1 // NOTE: terrible hack... this should be sent by the server\n                    };\n                } \n\n                return note;\n            });\n\n            return { \n                ...state, \n                notes: updatedNotes\n            };\n        }\n\n        case REMOVE_ITEM: {\n            const updatedNotes = state.notes.map(note => {\n                if (action.note.id === note.id) {\n                    const updatedItems = note.items.filter(item => item !== action.item);\n                    return {\n                        ... note,\n                        items: updatedItems,\n                        version: note.version + 1 // NOTE: terrible hack... this should be sent by the server\n                    };\n                } \n\n                return note;\n            });\n\n            return { \n                ...state, \n                notes: updatedNotes\n            };\n        }\n\n        case SET_NOTES: {\n            return { ...state, notes: action.notes };\n        }\n\n        case SET_STATS: {\n            return { ...state, stats: action.stats };\n        }\n\n        default:\n            return state;\n    }\n}\n","import { Note, Statistics } from \"../store/collabnotes\";\nimport { UpdateResponse } from \"./gen\";\nimport { NotesApi } from \"./NotesApi\";\nimport { StatsApi } from \"./StatsApi\";\n\nexport function fetchStatsRest(): Promise<Statistics> {\n    return new Promise<Statistics>((resolve, reject) => {\n        var statsApi = new StatsApi();\n        statsApi.stats().then(response => {\n            var stats: Statistics = {\n                avgItems: response.body.averageItems,\n                items: response.body.items,\n                notes: response.body.notes\n            };\n\n            resolve(stats);\n        });\n    });\n}\n\nexport function fetchAllNotesRest(): Promise<Note[]> {\n    return new Promise<Note[]>((resolve, reject) => {\n        var noteApi = new NotesApi();\n        noteApi.allNotes().then(response => {\n            var notes = response.body.map(n => {\n                var note: Note = {\n                    id: n.id,\n                    title: n.title,\n                    version: n.version,\n                    items: n.items\n                };\n\n                return note;\n            });\n\n            resolve(notes);\n        });\n    });\n}\n\nexport function createNoteRest(title: string) {\n    return new Promise<string>((resolve, reject) => {\n        var noteApi = new NotesApi();\n        noteApi.createNote(title).then(response => {\n            resolve(response.body);\n        });\n    });\n}\n\nexport function deleteNoteRest(note: Note): Promise<UpdateResponse> {\n    return new Promise<UpdateResponse>((resolve, reject) => {\n        var noteApi = new NotesApi();\n        noteApi.deleteNote(note.id, note.version).then(response => {\n            resolve(response.body);\n        });\n    });\n}\n\nexport function addItemRest(note: Note, item: string): Promise<UpdateResponse> {\n    return new Promise<UpdateResponse>((resolve, reject) => {\n        var noteApi = new NotesApi();\n        noteApi.addItem(note.id, note.version, item).then(response => {\n            resolve(response.body);\n        });\n    });\n}\n\nexport function removeItemRest(note: Note, item: string): Promise<UpdateResponse> {\n    return new Promise<UpdateResponse>((resolve, reject) => {\n        var noteApi = new NotesApi();\n        noteApi.removeItem(note.id, note.version, item).then(response => {\n            resolve(response.body);\n        });\n    });\n}\n","import React from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { RootState } from \"..\";\nimport { Link } from \"react-router-dom\";\n  \nconst mapStateToProps = (state: RootState) => ({\n    notes: state.collabNotes.notes,\n    stats: state.collabNotes.stats\n});\n\nconst connector = connect(mapStateToProps);\ntype Props = ConnectedProps<typeof connector>\n\nclass Home extends React.Component<Props> {\n    constructor(props: Props) { \n        super(props);\n    }\n\n    render() {\n        const noteTitles = this.props.notes.map((n) => {\n            return (\n                <li key={n.id}>\n                    <Link to={\"/spa/viewnote/\" + n.id}>{n.title}</Link>\n                </li>\n            );\n        });\n        \n        return (\n                <div>\n                    <nav>\n                        <Link to=\"/spa/newnote\">New Note</Link>\n\n                        <ul>\n                            {noteTitles}\n                        </ul>\n                    </nav>\n\n                    <div>Total Notes: {this.props.stats.notes}</div>\n                    <div>Total Items: {this.props.stats.items}</div>\n                    <div>Average Items per Note: {this.props.stats.avgItems}</div>\n                </div>);\n    };\n};\n\nexport default connector(Home);","import React from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { deleteNote, addItem, removeItem, Note } from \"../store/collabnotes\";\nimport { RootState } from \"..\";\nimport { Link, Redirect, useHistory, useParams } from \"react-router-dom\";\n  \nconst mapStateToProps = (state: RootState) => ({\n    notes: state.collabNotes.notes\n});\n\nconst mapDispatchToProps = { deleteNote, addItem, removeItem };\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype Props = ConnectedProps<typeof connector>\n\nconst ViewNote = (props: Props) => {\n    interface ParamTypes {\n        noteId: string\n    }\n\n    let history = useHistory();\n    let { noteId } = useParams<ParamTypes>();\n    \n    const foundNotes = props.notes.filter(n => n.id == noteId);\n    if (foundNotes.length !== 1) {\n        return (\n            <Redirect to=\"/spa/\"/>\n        );\n    }\n\n    const note = foundNotes[0];\n\n    const handleRemoveItem = (item: string): void => {\n        props.removeItem(note, item);\n        return;\n    };\n\n    const noteItems = note.items.map((i) => {\n        return (\n            <li key={i}>\n                {i}\n                <button onClick={(e) => handleRemoveItem(i)}>Remove</button>\n            </li>\n        );\n    });\n\n    const handleSubmit = (e: React.SyntheticEvent): void => {\n        e.preventDefault();\n\n        const form = e.target as typeof e.target & {\n            item: { value: string };\n        };\n\n        props.addItem(note, form.item.value);\n    };\n\n    const handleDeleteNoteClick = (note: Note): void => {\n        props.deleteNote(note);\n        history.push(\"/spa/\");\n    };\n\n    return (\n        <div>\n            <h1>{note.title}</h1>\n\n            <Link to=\"/spa/\">Back</Link>\n            \n            <p/>\n\n            <button onClick={(e) => handleDeleteNoteClick(note)}>Delete</button>\n            <p/>\n\n            <form onSubmit={handleSubmit}>\n                <input type=\"text\" name=\"item\"/>\n                <input type=\"submit\" value=\"Add Item\" />\n            </form>\n\n            <p/>\n\n            <ul>\n                {noteItems}\n            </ul>\n        </div>\n    );\n};\n\nexport default connector(ViewNote);","import React from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { createNote } from \"../store/collabnotes\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nconst mapDispatchToProps = { createNote };\n\nconst connector = connect(null, mapDispatchToProps);\ntype Props = ConnectedProps<typeof connector>\n\nconst NewNote = (props: Props) => {\n    let history = useHistory();\n\n    const handleSubmit = (e: React.SyntheticEvent): void => {\n        e.preventDefault();\n\n        const form = e.target as typeof e.target & {\n            title: { value: string };\n        };\n        \n        props.createNote(form.title.value, (newNoteId) => {\n            history.push(\"viewnote/\" + newNoteId);\n        });\n    };\n    \n    return (\n        <div>\n            <h1>New Note</h1>\n\n            <Link to=\"/spa/\">Back</Link>\n\n            <br/>\n            <br/>\n\n            <form onSubmit={handleSubmit}>\n                <input type=\"text\" name=\"title\"/>\n                <input type=\"submit\" value=\"Create\" />\n            </form>\n        </div>\n    );\n};\n\nexport default connector(NewNote);","import React from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { createNote, deleteNote, addItem, removeItem, fetchAllNotes, fetchStats, INITIAL_STATE } from \"./store/collabnotes\";\nimport { RootState } from \".\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route  } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport ViewNote from \"./components/ViewNote\";\nimport NewNote from \"./components/NewNote\";\n  \nconst mapStateToProps = (state: RootState) => ({\n    notes: state.collabNotes.notes,\n    stats: state.collabNotes.stats\n});\n\nconst mapDispatchToProps = { createNote, deleteNote, addItem, removeItem, fetchAllNotes, fetchStats };\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nclass CollabNotes extends React.Component<PropsFromRedux> {\n    constructor(props: PropsFromRedux) {\n        super(props);\n        this.state = INITIAL_STATE;\n    }\n\n    componentDidMount() {\n        this.props.fetchAllNotes();\n        this.props.fetchStats();\n    }\n    \n    // TODO: put paths into a common file\n\n    render() {\n        return <Router>\n                    <div>\n                        <Switch> \n                            <Route path=\"/spa/newnote\" \n                                component={NewNote} />\n\n                            <Route path=\"/spa/viewnote/:noteId\"\n                                component={ViewNote} />\n\n                            <Route path=\"/spa/\"\n                                component={Home} />\n                        </Switch>\n                    </div>\n                </Router>;\n    };\n};\n\nexport default connector(CollabNotes);","import ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { composeWithDevTools } from \"remote-redux-devtools\";\nimport thunk from \"redux-thunk\";\nimport { collabNotesReducer } from \"./store/collabnotes\";\nimport CollabNotes from \"./CollabNotes\";\nimport \"./index.css\";\n\nexport const rootReducer = combineReducers({\n    collabNotes: collabNotesReducer\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nconst store = createStore(\n    rootReducer, \n    composeWithDevTools(\n        applyMiddleware(thunk)\n    ));\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <Provider store={store}>\n        <CollabNotes />\n    </Provider>,\n    rootElement\n);\n"],"sourceRoot":""}